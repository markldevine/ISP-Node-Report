#!/usr/bin/env raku

use lib '/home/mdevine/github.com/ISP-dsmadmc/lib';

use ISP::dsmadmc;
use Data::Dump::Tree;
#use Grammar::Debugger;

my %nodes;
my %policy;
my %clos;
my @sql;
my $summary-retention;

sub MAIN (
    Str:D   :$isp-node-name                     = 'AIXTEST',    #= ISP client name (SELECT NODE_NAME FROM NODES)
    Str:D   :$isp-server                        = 'ISPLC02',    #= ISP server name (SELECT SERVER_NAME FROM STATUS)
    Str:D   :$isp-admin                         = 'A028441',    #= ISP server Admin account
    Int:D   :$window-hour   where 0 <= * <= 24  = 15,           #= Daily backup window hour
    Bool    :$cache                             = True,         #= Read from cache
) {
    my ISP::dsmadmc $dsmadmc   .= new(:$isp-server, :$isp-admin, :$cache);

    @sql = 'select', 'SUMMARYRETENTION', 'from', 'STATUS';
    for $dsmadmc.execute(@sql) -> $record {
        $summary-retention  = $record.values.tail;
    }
#put 'purge-older-than: ' ~ DateTime.new(now - ($summary-retention * (24 * 60 * 60)));

    @sql =
        'select', 'DOMAIN_NAME,CLASS_NAME,DESTINATION,RETEXTRA,RETONLY',
        'from', 'BU_COPYGROUPS',
        'where', "SET_NAME='ACTIVE'",
        'order', 'by', 'DOMAIN_NAME';

    for $dsmadmc.execute(@sql) -> $record {
        %policy<DOMAIN_NAME>{$record<DOMAIN_NAME>}<CLASS_NAME>{$record<CLASS_NAME>}<DESTINATION>    = $record<DESTINATION>;
        note $record<CLASS_NAME> unless $record<RETEXTRA> eq $record<RETONLY>;
        %policy<DOMAIN_NAME>{$record<DOMAIN_NAME>}<CLASS_NAME>{$record<CLASS_NAME>}<RETENTION>      = $record<RETEXTRA>;
    }
#ddt %policy;

    @sql = 'select', 'NODE_NAME', 'from', 'NODES';
    for $dsmadmc.execute(@sql) -> $record {
        my $node-name       = $record.values.tail;
        %nodes{$node-name}  = {}                    if $node-name eq 'ISPLC02'; #%%%
    }

    for %nodes.keys -> $node-name {
put $node-name;
        @sql =  'select',
                'B.NODE_NAME,',
                'B.FILESPACE_NAME,',
                'B.CLASS_NAME,',
                'sum(BK.BFSIZE)', 'as', 'BYTES,',
                'count(BK.BFSIZE)', 'as', 'NUMBER_OF_OBJECTS',
                'from', 'BACKUPS B,', 'BACKUP_OBJECTS', 'BK',
                'where', 'B.OBJECT_ID=BK.OBJID',
                'and', "B.NODE_NAME='" ~ $node-name ~ "'",
                'group', 'by', 'B.NODE_NAME,', 'B.FILESPACE_NAME,', 'B.CLASS_NAME';
        for $dsmadmc.execute(@sql) -> $record {
            next unless $record<FILESPACE_NAME>;
            %nodes{$node-name}<FILESPACE_NAME>{$record<FILESPACE_NAME>}<CLASS_NAME>{$record<CLASS_NAME>}<BYTES>             = $record<BYTES>;
            %nodes{$node-name}<FILESPACE_NAME>{$record<FILESPACE_NAME>}<CLASS_NAME>{$record<CLASS_NAME>}<NUMBER_OF_OBJECTS> = $record<NUMBER_OF_OBJECTS>;
        }

#   start_time> '2012-09-01 00:00:00' AND start_time < '2012-09-02 00:00:00'
        my $today           = DateTime.new(now);
        my $date-time       = DateTime.new(:year($today.year), :month($today.month), :day($today.day), :hour($window-hour), :0minute, :0second);
die $date-time;
        @sql =  'select', 'ENTITY,sum(BYTES)', 'as', 'BYTES',
                'from', 'SUMMARY',
                'where', "ENTITY='" ~ $node-name ~ "'",
                'and', "ACTIVITY='BACKUP'",
                'and', 'START_TIME>=current_timestamp-24', 'hours',
                'group', 'by', 'ENTITY',
                'order', 'by', '2', 'desc';
        for $dsmadmc.execute(@sql, :purge-older-than(now - ($summary-retention * (24 * 60 * 60)))) -> $record {
ddt $record;
        }

    }
ddt %nodes;
}
=finish
