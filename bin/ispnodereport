#!/usr/bin/env raku

#use lib '/home/mdevine/github.com/ISP-dsmadmc/lib';
#use lib '/home/mdevine/github.com/raku-Our-Grid/lib';
#use lib '/home/mdevine/github.com/raku-Our-Cache/lib';

use Getopt::Long;
use ISP::dsmadmc;
use Our::Grid;
use Our::Utilities;

use Data::Dump::Tree;
#use Grammar::Debugger;

my Our::Grid    $grid;
my              @nodes;
my              %nodes;
my              %policy;
my              %defaultmc;
my              @sql;
my Int          $summary-retention;

my $tz-off      = now.DateTime.local.timezone;

sub MAIN (
    Str:D   :@node,                                             #= ISP client name(s)
    Str:D   :$isp-server                        = 'ISPLC01',    #= ISP server name
    Str:D   :$isp-admin                         = 'A028441',    #= ISP server Admin account
    Int:D   :$window-hour   where 0 <= * <= 24  = 15,           #= Daily backup window hour
    Str     :$domain,                                           #= Filter by DOMAIN
    Bool    :$detail,                                           #= Add filespace detail rows
    Bool    :$with-occupancy                    = False,        #= Filter reporting to only NODEs with storage occupancy
    Bool    :$data-cache                        = True,         #= Read 'data' from cache
    Bool    :$report-cache                      = True,         #= Read 'report' from cache
) {
#   if $report-cache, just pull the last finalized report...

    @nodes = @node.map({ .uc }).sort if @node.elems;

    $grid      .= new;
    $grid.title('ISP Node Summary');
    $grid.add-heading: 'Node',                                                                              :bold,  :justification<left>;
    $grid.add-heading:  :cell(
                            Our::Grid::Cell.new(
                                :fragments(
                                    Our::Grid::Cell::Fragment.new(:text('Files' ~ ouc-superscript-minus),   :bold),
                                    Our::Grid::Cell::Fragment.new(:text('1'),                               :bold,  :superscript),
                                ),                                                                          :justification<right>,
                            )
                        );
    $grid.add-heading:  :cell(
                            Our::Grid::Cell.new(
                                :fragments(
                                    Our::Grid::Cell::Fragment.new(:text('Files' ~ ouc-superscript-minus),   :bold),
                                    Our::Grid::Cell::Fragment.new(:text('7'),                               :bold,  :superscript),
                                ),                                                                          :justification<right>,
                            )
                        );
    $grid.add-heading:  :cell(
                            Our::Grid::Cell.new(
                                :fragments(
                                    Our::Grid::Cell::Fragment.new(:text('Files' ~ ouc-superscript-minus),   :bold),
                                    Our::Grid::Cell::Fragment.new(:text('30'),                              :bold,  :superscript),
                                ),                                                                          :justification<right>,
                            )
                        );
    $grid.add-heading:  :cell(
                            Our::Grid::Cell.new(
                                :fragments(
                                    Our::Grid::Cell::Fragment.new(:text('Size' ~ ouc-superscript-minus),    :bold),
                                    Our::Grid::Cell::Fragment.new(:text('1'),                               :bold,  :superscript),
                                ),                                                                          :justification<right>,
                            )
                        );
    $grid.add-heading:  :cell(
                            Our::Grid::Cell.new(
                                :fragments(
                                    Our::Grid::Cell::Fragment.new(:text('Size' ~ ouc-superscript-minus),    :bold),
                                    Our::Grid::Cell::Fragment.new(:text('7'),                               :bold,  :superscript),
                                ),                                                                          :justification<right>,
                            )
                        );
    $grid.add-heading:  :cell(
                            Our::Grid::Cell.new(
                                :fragments(
                                    Our::Grid::Cell::Fragment.new(:text('Size' ~ ouc-superscript-minus),    :bold),
                                    Our::Grid::Cell::Fragment.new(:text('30'),                              :bold,  :superscript),
                                ),                                                                          :justification<right>,
                            )
                        );
    $grid.add-heading:  :cell(
                            Our::Grid::Cell.new(
                                :fragments(
                                    Our::Grid::Cell::Fragment.new(:text('Elapsed' ~ ouc-superscript-minus), :bold),
                                    Our::Grid::Cell::Fragment.new(:text('1'),                               :bold,  :superscript),
                                ),                                                                          :justification<right>,
                            )
                        );
    $grid.add-heading:  :cell(
                            Our::Grid::Cell.new(
                                :fragments(
                                    Our::Grid::Cell::Fragment.new(:text('Elapsed' ~ ouc-superscript-minus), :bold),
                                    Our::Grid::Cell::Fragment.new(:text('7'),                               :bold,  :superscript),
                                ),                                                                          :justification<right>,
                            )
                        );
    $grid.add-heading:  :cell(
                            Our::Grid::Cell.new(
                                :fragments(
                                    Our::Grid::Cell::Fragment.new(:text('Elapsed' ~ ouc-superscript-minus), :bold),
                                    Our::Grid::Cell::Fragment.new(:text('30'),                              :bold,  :superscript),
                                ),                                                                          :justification<right>,
                            )
                        );
    $grid.add-heading: 'File ' ~ ouc-delta ~ ' Rate'        ~ ouc-superscript-H,                            :bold,  :justification<right>;
    $grid.add-heading: 'Backup Size'        ~ ouc-superscript-H,                                            :bold,  :justification<right>;
    $grid.add-heading: 'Backup Duration'    ~ ouc-superscript-H,                                            :bold,  :justification<right>;

    $grid.add-heading: 'File Space',                                                                        :bold,  :justification<left>;
    $grid.add-heading: 'Retention',                                                                         :bold,  :justification<right>;
    $grid.add-heading: 'Files Protected',                                                                   :bold,  :justification<right>;
    $grid.add-heading: 'Back-End Storage',                                                                  :bold,  :justification<right>;

    my ISP::dsmadmc $dsmadmc   .= new(:$isp-server, :$isp-admin, :cache($data-cache));

    @sql = 'select', 'SUMMARYRETENTION', 'from', 'STATUS';
    for $dsmadmc.execute(@sql, :expire-after(DateTime.new(now + (24 * 60 * 60)))) -> $record {
        $summary-retention  = $record.values.tail.Int;
    }

    @sql            =   'select',
                        'DOMAIN_NAME,CLASS_NAME,DESTINATION,RETEXTRA,RETONLY',
                        'from',
                        'BU_COPYGROUPS',
                        'where',
                        "SET_NAME='ACTIVE'";
    if $domain {
        @sql.append:    'and',
                        "DOMAIN_NAME='" ~ $domain.uc ~ "'";
    }
    @sql.append:        'order', 'by', 'DOMAIN_NAME';

    for $dsmadmc.execute(@sql, :expire-after(DateTime.new(now + (24 * 60 * 60)))) -> $record {
        %policy<DOMAIN_NAME>{$record<DOMAIN_NAME>}<CLASS_NAME>{$record<CLASS_NAME>}<DESTINATION>    = $record<DESTINATION>;
        note $record<CLASS_NAME> unless $record<RETEXTRA> eq $record<RETONLY>;
        %policy<DOMAIN_NAME>{$record<DOMAIN_NAME>}<CLASS_NAME>{$record<CLASS_NAME>}<RETENTION>      = $record<RETEXTRA>;
    }
    if $domain {
        die "Unknown --domain=$domain" unless %policy<DOMAIN_NAME>{$domain.uc}:exists;
    }

#   DFS => {1} @10
#       CLASS_NAME => {3} @11
#           DC => {2} @12
#               DESTINATION => DFS_DC.Str
#               RETENTION => 180   .Str
#           STANDARD => {2} @13
#               DESTINATION => DFS_DC.Str
#               RETENTION => 731   .Str
#           TGV => {2} @14
#               DESTINATION => DFS_DC.Str
#               RETENTION => 1830  .Str

    @sql            =   'select',
                        'DOMAIN_NAME,CLASS_NAME',
                        'from', 'MGMTCLASSES',
                        'where';
    if $domain {
        @sql.append:    "DOMAIN_NAME='" ~ $domain.uc ~ "'",
                        'and';
    }
    @sql.append:        "SET_NAME='ACTIVE'",
                        'and',
                        "DEFAULTMC='Yes'";
    for $dsmadmc.execute(@sql, :expire-after(DateTime.new(now + (24 * 60 * 60)))) -> $record {
        %defaultmc{$record<DOMAIN_NAME>}    = $record<CLASS_NAME>;
    }

    @sql            =   'select',
                        'DOMAIN_NAME,NODE_NAME',
                        'from', 'NODES';
    if @nodes.elems {
        @sql.append:    'where',
                        'NODE_NAME',
                        'in',
                        '(';
        my @n;
        for @nodes -> $n {
            @n.append:  "'" ~ $n ~ "'",
        }
        @sql.append:    @n.join(',');
        @sql.append:    ')';
    }
    elsif $domain {
        @sql.append:    'where',
                        "DOMAIN_NAME='" ~ $domain.uc ~ "'";
    }
    for $dsmadmc.execute(@sql, :expire-after(DateTime.new(now + (24 * 60 * 60)))) -> $record {
        %nodes{$record<NODE_NAME>}<DOMAIN_NAME> = $record<DOMAIN_NAME>;
    }

#   AIXTEST => {1} @1
#       DOMAIN_NAME => BA.Str

put 'Node consumption...';
    @sql            =   'select',
                        'B.NODE_NAME,',
                        'B.FILESPACE_NAME,',
                        'B.CLASS_NAME,',
                        'sum(BK.BFSIZE)', 'as', 'BYTES,',
                        'count(BK.BFSIZE)', 'as', 'NUMBER_OF_OBJECTS',
                        'from', 'BACKUPS', 'B,', 'BACKUP_OBJECTS', 'BK',
                        'where';
    if @nodes.elems {
        @sql.append:    'B.NODE_NAME',
                        'in',
                        '(';
        my @n;
        for @nodes -> $n {
            @n.append:  "'" ~ $n ~ "'",
        }
        @sql.append:    @n.join(',');
        @sql.append:    ')',
                        'and';
    }
    elsif $domain {
        @sql.append:    'B.NODE_NAME',
                        'in',
                        '(select',
                        'NODE_NAME',
                        'from',
                        'NODES',
                        'where',
                        "DOMAIN_NAME='" ~ $domain.uc ~ "')",
                        'and';
    }
    @sql.append:        'B.OBJECT_ID=BK.OBJID',
                        'and',
                        "B.TYPE<>'DIR'",
                        'group', 'by', 'B.NODE_NAME,', 'B.FILESPACE_NAME,', 'B.CLASS_NAME';

    for $dsmadmc.execute(@sql, :expire-after(DateTime.new(now + (24 * 60 * 60)))) -> $record {
        next            unless $record<FILESPACE_NAME>;
        my $node-name   = $record<NODE_NAME>;
        next            unless %nodes{$node-name}:exists;
        %nodes{$node-name}<POLICY><FILESPACE_NAME>{$record<FILESPACE_NAME>}<CLASS_NAME>{$record<CLASS_NAME>}<BYTES>             = $record<BYTES>;
        %nodes{$node-name}<POLICY><FILESPACE_NAME>{$record<FILESPACE_NAME>}<CLASS_NAME>{$record<CLASS_NAME>}<NUMBER_OF_OBJECTS> = $record<NUMBER_OF_OBJECTS>;
    }

#   AIXTEST => {2} @1
#       DOMAIN_NAME => BA.Str
#       POLICY => {1} @2
#           FILESPACE_NAME => {9} @3
#               / => {1} @4
#                   CLASS_NAME => {1} @5
#                       DEFAULT => {2} @6
#                           BYTES => 2190667164.Str
#                           NUMBER_OF_OBJECTS => 20090.Str
#               /admin => {1} @7
#                   CLASS_NAME => {1} @8
#                       DEFAULT => {2} @9
#                           BYTES => 7582232576.Str
#                           NUMBER_OF_OBJECTS => 390.Str
#               /audit => {1} @10
#                   CLASS_NAME => {1} @11
#                       DEFAULT => {2} @12
#                           BYTES => 21629952.Str
#                           NUMBER_OF_OBJECTS => 4.Str
#               /home => {1} @13
#                   CLASS_NAME => {1} @14
#                       DEFAULT => {2} @15
#                           BYTES => 287307776.Str
#                           NUMBER_OF_OBJECTS => 10314.Str
#               /nmon => {1} @16
#                   CLASS_NAME => {1} @17
#                       DEFAULT => {2} @18
#                           BYTES => 5401223168.Str
#                           NUMBER_OF_OBJECTS => 603.Str
#               /opt => {1} @19
#                   CLASS_NAME => {1} @20
#                       DEFAULT => {2} @21
#                           BYTES => 24136881222.Str
#                           NUMBER_OF_OBJECTS => 36224.Str
#               /usr => {1} @22
#                   CLASS_NAME => {1} @23
#                       DEFAULT => {2} @24
#                           BYTES => 8890792514.Str
#                           NUMBER_OF_OBJECTS => 82325.Str
#               /var => {1} @25
#                   CLASS_NAME => {1} @26
#                       DEFAULT => {2} @27
#                           BYTES => 32309822100.Str
#                           NUMBER_OF_OBJECTS => 23781.Str
#               /wmata => {1} @28
#                   CLASS_NAME => {1} @29
#                       DEFAULT => {2} @30
#                           BYTES => 4564601856.Str
#                           NUMBER_OF_OBJECTS => 68.Str
#       SUMMARY => {1} @30
#           SCHEDULE => {1} @31
#               SCH_1500 => {4} @32
#                   AFFECTED => [307] @33
#                       0 = 348.Str
#                       1 = 264.Str
#                       2 = 292.Str
#                       3 = 307.Str
#                       4 = 1394.Str
#                       5 = 274.Str
#                       6 = 471.Str
#                       7 = 337.Str
#                       8 = 338.Str
#                       9 = 377.Str
#                       10 = 428.Str
#                   BYTES => [307] @34
#                       0 = 17869402.Str
#                       1 = 15572575.Str
#                       2 = 20260507.Str
#                       3 = 15960831.Str
#                       4 = 59618072.Str
#                       5 = 16519598.Str
#                       6 = 15943586.Str
#                       7 = 16653235.Str
#                       8 = 17058054.Str
#                       9 = 18418275.Str
#                       10 = 19958258.Str
#                   ELAPSED => [307] @35
#                       0 = 25   
#                       1 = 22   
#                       2 = 20   
#                       3 = 22   
#                       4 = 28   
#                       5 = 19   
#                       6 = 25   
#                       7 = 21   
#                       8 = 24   
#                       9 = 27   
#                       10 = 86   
#                   EXAMINED => [307] @36
#                       0 = 141293.Str
#                       1 = 141286.Str
#                       2 = 141283.Str
#                       3 = 141317.Str
#                       4 = 141339.Str
#                       5 = 141312.Str
#                       6 = 141302.Str
#                       7 = 141294.Str
#                       8 = 141289.Str
#                       9 = 141289.Str
#                       10 = 141287.Str

put 'Summary...';
    my $today           = DateTime.new(now);
    my DateTime $start-date-time;
    my DateTime $end-date-time  = DateTime.new(:year($today.year), :month($today.month), :day($today.day), :hour($window-hour), :0minute, :0second, :timezone($tz-off));
    $start-date-time = DateTime.new: $end-date-time - ($summary-retention * (24 * 60 * 60));
    @sql            =   'select', 
                        'AFFECTED,BYTES,END_TIME,ENTITY,EXAMINED,SCHEDULE_NAME,START_TIME',
                        'from', 'SUMMARY',
                        'where';
    if @nodes.elems {
        @sql.append:    'ENTITY',
                        'in',
                        '(';
        my @n;
        for @nodes -> $n {
            @n.append:  "'" ~ $n ~ "'",
        }
        @sql.append:    @n.join(',');
        @sql.append:    ')',
                        'and';
    }
    elsif $domain {
        @sql.append:    'ENTITY',
                        'in',
                        '(select',
                        'NODE_NAME',
                        'from',
                        'NODES',
                        'where',
                        "DOMAIN_NAME='" ~ $domain.uc ~ "')",
                        'and';
    }
    @sql.append:        "ACTIVITY='BACKUP'",
                        'and',
                        'START_TIME>=' ~ "'" ~
                        DateTime.new($start-date-time.Numeric, :formatter({sprintf "%04d-%02d-%02d %02d:%02d:%02d", .year, .month, .day, .hour, .minute, .second})).Str ~ "'",
                        'and',
                        'START_TIME<=' ~ "'" ~
                        DateTime.new($end-date-time.Numeric,   :formatter({sprintf "%04d-%02d-%02d %02d:%02d:%02d", .year, .month, .day, .hour, .minute, .second})).Str ~ "'",
                        'order', 'by', 'ENTITY';

#   AFFECTED => 287
#   BYTES => 19060591.Str
#   END_TIME => .DateTime @1
#       $.hour = 15   
#       $.minute = 29   
#       $.second = 47   
#       $.timezone = -14400   
#       $.year = 2023   
#       $.month = 9   
#       $.day = 14   
#       $.daycount = 0   
#       &.formatter = Nil
#   ENTITY => AIXTEST.Str
#   EXAMINED => 134046.Str
#   START_TIME => .DateTime @2
#       $.hour = 15   
#       $.minute = 29   
#       $.second = 23   
#       $.timezone = -14400   
#       $.year = 2023   
#       $.month = 9   
#       $.day = 14   
#       $.daycount = 0   
#       &.formatter = Nil

    my $now                         = now.DateTime;
    my $target                      = $now;
    $target                         = DateTime.new(($now - (24 * 60 * 60))) if $now.hour < $window-hour;
    my $year                        = $target.local.year;
    my $month                       = $target.local.month;
    my $day                         = $target.local.day;
    my $end-window                  = DateTime.new( :$year, :$month, :$day, :hour($window-hour), :00minute, :00second, :timezone($tz-off));
    my $begin-window                = $end-window - (24 * 60 * 60);
#put $end-window.local;
#   my $anon-count              = 1;
    for $dsmadmc.execute(@sql, :expire-after(DateTime.new(now + (24 * 60 * 60)))) -> $record {
        my $node-name = $record<ENTITY>;
        my $schedule-name       = $record<SCHEDULE_NAME>;
        next                    unless $schedule-name;
#       $schedule-name          = 'ANON' ~ $anon-count++ unless $schedule-name;
                                                                                                                                    die 'ENTITY <' ~ $node-name ~ '> encountered in SUMMARY but not in NODES' unless %nodes{$node-name}:exists; #%%%%%%%%%%%%%%%%%%%%%%
        my $affected            = $record<AFFECTED>;
        my $bytes               = $record<BYTES>;
        my $end-time            = $record<END_TIME>;
        my $examined            = $record<EXAMINED>;
        my $start-time          = $record<START_TIME>;
        my $elapsed-seconds     = $end-time.posix - $start-time.posix;

#   2024-07-01 20:21:59.000000      2024-07-01 21:08:11.000000      BACKUP  933132  JGDCIEVAULT01PV SSL     10.10.131.229:43676     SCH_2000

        my $result              = (($end-window - $start-time) / (24 * 60 * 60));
        if $result <= 0 {
#           note 'Data DT ' ~ $start-time.DateTime.local ~ " is after backup window's cutoff";
            next;
        }
        my $index               = $result.floor;
#       $index++                if $index < $result;
#put "[$index]\t\t$start-time";
        %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule-name}<AFFECTED>[$index]    += $affected;
        %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule-name}<BYTES>[$index]       += $bytes;
        %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule-name}<EXAMINED>[$index]    += $examined;
        %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule-name}<ELAPSED>[$index]     += $elapsed-seconds;
    }

##  my @fragments  = ();
##  @fragments.push: Our::Grid::Cell::Fragment.new(:text('AIXTEST' ~ ouc-superscript-lparen),   :bold);
##  @fragments.push: Our::Grid::Cell::Fragment.new(:text('90'),                                 :bold, :superscript);
##  @fragments.push: Our::Grid::Cell::Fragment.new(:text(ouc-superscript-rparen),               :bold);
##  $grid.add-cell: :cell(Our::Grid::Cell.new(:@fragments,                                      :justification<left>));

#   AIXTEST => {2} @1
#       DOMAIN_NAME => BA.Str
#       POLICY => {1} @2
#           FILESPACE_NAME => {9} @3
#               / => {1} @4
#                   CLASS_NAME => {1} @5
#                       DEFAULT => {2} @6
#                           BYTES => 2190667164.Str
#                           NUMBER_OF_OBJECTS => 20090.Str
#               /admin => {1} @7
#                   CLASS_NAME => {1} @8
#                       DEFAULT => {2} @9
#                           BYTES => 7582232576.Str
#                           NUMBER_OF_OBJECTS => 390.Str
#       SUMMARY => {1} @30
#           SCHEDULE => {1} @31
#               SCH_1500 => {4} @32
#                   AFFECTED => [307] @33
#                       0 = 348.Str

put 'Grid...';
    for %nodes.keys.sort -> $node-name {
        my $domain-name         = %nodes{$node-name}<DOMAIN_NAME>;
#       my $files1;
#       my $files7;
#       my $files7-count;
#       my $files30;
#       my $files30-count;
#       my $size1;
#       my $size7;
#       my $size7-count;
#       my $size30;
#       my $size30-count;
#       my $elapsed1;
#       my $elapsed7;
#       my $elapsed7-count;
#       my $elapsed30;
#       my $elapsed30-count;
        my $files1                  = 0;
        my $files7                  = 0;
        my $files7-count            = 0;
        my $files30                 = 0;
        my $files30-count           = 0;
        my $size1                   = 0;
        my $size7                   = 0;
        my $size7-count             = 0;
        my $size30                  = 0;
        my $size30-count            = 0;
        my $elapsed1                = 0;
        my $elapsed7                = 0;
        my $elapsed7-count          = 0;
        my $elapsed30               = 0;
        my $elapsed30-count         = 0;
        my $total-size              = 0;
        my $total-size-count        = 0;
        my $total-elapsed           = 0;
        my $total-elapsed-count     = 0;
        my $total-affected          = 0;
        my $total-affected-count    = 0;
        my $total-examined          = 0;
        my $total-examined-count    = 0;
        my $file-change-rate        = 0;
        for %nodes{$node-name}<SUMMARY><SCHEDULE>.keys -> $schedule {
            $files1            += %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<AFFECTED>[0]             if %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<AFFECTED>[0]:exists;
            loop (my $i = 0; $i < 7; $i++) {
                if %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<AFFECTED>[$i]:exists {
                    with %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<AFFECTED>[$i] {
                        $files7 += %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<AFFECTED>[$i];
                        $files7-count++;
                    }
                }
            }
            loop ($i = 0; $i < 30; $i++) {
                if %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<AFFECTED>[$i]:exists {
                    with %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<AFFECTED>[$i] {
                        $files30 += %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<AFFECTED>[$i];
                        $files30-count++;
                    }
                }
            }
            $size1             += %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<BYTES>[0]                if %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<BYTES>[0]:exists;
            loop ($i = 0; $i < 7; $i++) {
                if %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<BYTES>[$i]:exists {
                    with %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<BYTES>[$i] {
                        $size7 += %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<BYTES>[$i];
                        $size7-count++;
                    }
                }
            }
            loop ($i = 0; $i < 29; $i++) {
                if %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<BYTES>[$i]:exists {
                    with %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<BYTES>[$i] {
                        $size30 += %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<BYTES>[$i];
                        $size30-count++;
                    }
                }
            }
            $elapsed1          += %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<ELAPSED>[0]              if %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<ELAPSED>[0]:exists;
            loop ($i = 0; $i < 7; $i++) {
                if %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<ELAPSED>[$i]:exists {
                    with %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<ELAPSED>[$i] {
                        $elapsed7 += %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<ELAPSED>[$i];
                        $elapsed7-count++;
                    }
                }
            }
            loop ($i = 0; $i < 29; $i++) {
                if %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<ELAPSED>[$i]:exists {
                    with %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<ELAPSED>[$i] {
                        $elapsed30 += %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<ELAPSED>[$i];
                        $elapsed30-count++;
                    }
                }
            }
            for %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<BYTES>.list -> $bytes {
                next            without $bytes;
                $total-size    += $bytes.Int;
                $total-size-count++;
            }
            for %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<ELAPSED>.list -> $elapsed {
                next            without $elapsed;
                $total-elapsed += $elapsed.Int;
                $total-elapsed-count++;
            }
            for %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<AFFECTED>.list -> $affected {
                next            without $affected;
                $total-affected += $affected.Int;
                $total-affected-count++;
            }
            for %nodes{$node-name}<SUMMARY><SCHEDULE>{$schedule}<EXAMINED>.list -> $examined {
                next            without $examined;
                $total-examined += $examined.Int;
                $total-examined-count++;
            }
        }
        $files7                 = ($files7 / $files7-count).round                                           if $files7;
        $files30                = ($files30 / $files30-count).round                                         if $files30;
        $size7                  = ($size7 / $size7-count).round                                             if $size7;
        $size30                 = ($size30 / $size30-count).round                                           if $size30;
        $elapsed7               = ($elapsed7 / $elapsed7-count).round                                       if $elapsed7;
        $elapsed30              = ($elapsed30 / $elapsed30-count).round                                     if $elapsed30;
        $total-size             = ($total-size / $total-size-count).round                                   if $total-size;
        $total-elapsed          = ($total-elapsed / $total-elapsed-count).round                             if $total-elapsed;
        $file-change-rate       = (($total-affected / $total-examined) * 100).round                         if $total-affected;
        my %retentions;
        my %filespaces;
        my $total-number-of-objects;
        my $total-number-of-bytes;
        for %nodes{$node-name}<POLICY><FILESPACE_NAME>.keys -> $filespace {
            for %nodes{$node-name}<POLICY><FILESPACE_NAME>{$filespace}<CLASS_NAME>.keys -> $class-name {
                my $active-class-name       = $class-name;
                $active-class-name          = %defaultmc{$domain-name} if $class-name eq 'DEFAULT';
                my $retention               = %policy<DOMAIN_NAME>{$domain-name}<CLASS_NAME>{$active-class-name}<RETENTION>;
                %retentions{$retention}     = 0;
                %filespaces{$filespace}     = 0;
                $total-number-of-objects   += %nodes{$node-name}<POLICY><FILESPACE_NAME>{$filespace}<CLASS_NAME>{$class-name}<NUMBER_OF_OBJECTS>;
                $total-number-of-bytes     += %nodes{$node-name}<POLICY><FILESPACE_NAME>{$filespace}<CLASS_NAME>{$class-name}<BYTES>;
            }
        }

        if $with-occupancy {
            next                            unless %filespaces.elems;
        }

#       :highlight(21, 41, 34),     :background(21, 41, 34) # almost black-green
#       :highlight(4, 102, 69),     :background(4, 102, 69) # medium green

        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($node-name),                                                                                             :justification<left>,   :foreground<white>, :highlight(15, 79, 52),     :background(15, 79, 52))),                                  :0col);

        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($files1),                                                                                                :justification<right>,  :foreground<white>, :highlight(0, 160, 100),    :background(0, 160, 100),   :add-commas-to-digits)),        :1col);
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($files7),                                                                                                :justification<right>,  :foreground<white>, :highlight(0, 160, 100),    :background(0, 160, 100),   :add-commas-to-digits)),        :2col);
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($files30),                                                                                               :justification<right>,  :foreground<white>, :highlight(0, 160, 100),    :background(0, 160, 100),   :add-commas-to-digits)),        :3col);

        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($size1),                                                                                                 :justification<right>,  :foreground<white>, :highlight(6, 122, 82),     :background(6, 122, 82),    :bytes-to-bytes-unit)),         :4col);
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($size7),                                                                                                 :justification<right>,  :foreground<white>, :highlight(6, 122, 82),     :background(6, 122, 82),    :bytes-to-bytes-unit)),         :5col);
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($size30),                                                                                                :justification<right>,  :foreground<white>, :highlight(6, 122, 82),     :background(6, 122, 82),    :bytes-to-bytes-unit)),         :6col);

        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($elapsed1),                                                                                              :justification<right>,  :foreground<white>, :highlight(0, 160, 100),    :background(0, 160, 100),   :seconds-to-y-d-hh-mm-ss)),     :7col);
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($elapsed7),                                                                                              :justification<right>,  :foreground<white>, :highlight(0, 160, 100),    :background(0, 160, 100),   :seconds-to-y-d-hh-mm-ss)),     :8col);
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($elapsed30),                                                                                             :justification<right>,  :foreground<white>, :highlight(0, 160, 100),    :background(0, 160, 100),   :seconds-to-y-d-hh-mm-ss)),     :9col);

        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($file-change-rate.Str ~ '%'),                                                                            :justification<right>,  :foreground<white>, :highlight(6, 122, 82),     :background(6, 122, 82))),                                  :10col);
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($total-size),                                                                                            :justification<right>,  :foreground<white>, :highlight(6, 122, 82),     :background(6, 122, 82),    :bytes-to-bytes-unit)),         :11col);
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($total-elapsed),                                                                                         :justification<right>,  :foreground<white>, :highlight(6, 122, 82),     :background(6, 122, 82),    :seconds-to-y-d-hh-mm-ss)),     :12col);

        unless %nodes{$node-name}<POLICY><FILESPACE_NAME>.elems {
            $grid.current-row++;
            next;
        }

        if %filespaces.elems == 1 {
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text(%filespaces.keys.first),                                                                             :justification<left>,   :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169))),                             :13col);
        }
        elsif %filespaces.elems == 0 {
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text('-'),                                                                                                :justification<left>,   :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169))),                             :13col);
        }
        else {
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text('*'),                                                                                                :justification<left>,   :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169))),                             :13col);
        }
        if %retentions.elems == 1 {
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text(%retentions.keys.first),                                                                             :justification<right>,  :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169), :add-commas-to-digits)),      :14col);
        }
        elsif %retentions == 0 {
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text('-'),                                                                                                :justification<right>,  :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169))),                             :14col);
        }
        else {
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text('*'),                                                                                                :justification<right>,  :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169))),                             :14col);
        }
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($total-number-of-objects),                                                                               :justification<right>,  :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169), :number-to-metric-unit)),     :15col);
        $grid.add-cell(:cell(Our::Grid::Cell.new(:text($total-number-of-bytes),                                                                                 :justification<right>,  :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169), :bytes-to-bytes-unit)),       :16col);
        $grid.current-row++;

        next unless $detail && %filespaces.elems > 1;

        for %nodes{$node-name}<POLICY><FILESPACE_NAME>.keys.sort -> $filespace {
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($filespace),                                                                                         :justification<left>,   :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169))),                             :13col);
            my $class-name      = %nodes{$node-name}<POLICY><FILESPACE_NAME>{$filespace}<CLASS_NAME>.keys.first;
            my $active-class-name   = $class-name;
            $active-class-name      = %defaultmc{$domain-name} if $class-name eq 'DEFAULT';
            my $retention           = %policy<DOMAIN_NAME>{$domain-name}<CLASS_NAME>{$active-class-name}<RETENTION>;
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text($retention),                                                                                         :justification<right>,  :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169), :add-commas-to-digits)),      :14col);
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text(%nodes{$node-name}<POLICY><FILESPACE_NAME>{$filespace}<CLASS_NAME>{$class-name}<NUMBER_OF_OBJECTS>), :justification<right>,  :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169), :add-commas-to-digits)),      :15col);
            $grid.add-cell(:cell(Our::Grid::Cell.new(:text(%nodes{$node-name}<POLICY><FILESPACE_NAME>{$filespace}<CLASS_NAME>{$class-name}<BYTES>),             :justification<right>,  :foreground<black>, :highlight(135, 233, 169),    :background(135, 233, 169), :bytes-to-bytes-unit)),       :16col);
            $grid.current-row++;
        }
    }
#   $grid.ANSI-print;
#   $grid.TEXT-print;
#   $grid.TUI;
    $grid.HTML-print;
}

=finish
